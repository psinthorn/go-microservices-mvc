// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sensorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SensorClient is the client API for Sensor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorClient interface {
	TempSensor(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (Sensor_TempSensorClient, error)
	HumiditySensor(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (Sensor_HumiditySensorClient, error)
}

type sensorClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorClient(cc grpc.ClientConnInterface) SensorClient {
	return &sensorClient{cc}
}

func (c *sensorClient) TempSensor(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (Sensor_TempSensorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sensor_serviceDesc.Streams[0], "/sensors.Sensor/TempSensor", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorTempSensorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sensor_TempSensorClient interface {
	Recv() (*SensorResponse, error)
	grpc.ClientStream
}

type sensorTempSensorClient struct {
	grpc.ClientStream
}

func (x *sensorTempSensorClient) Recv() (*SensorResponse, error) {
	m := new(SensorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sensorClient) HumiditySensor(ctx context.Context, in *SensorRequest, opts ...grpc.CallOption) (Sensor_HumiditySensorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sensor_serviceDesc.Streams[1], "/sensors.Sensor/HumiditySensor", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorHumiditySensorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sensor_HumiditySensorClient interface {
	Recv() (*SensorResponse, error)
	grpc.ClientStream
}

type sensorHumiditySensorClient struct {
	grpc.ClientStream
}

func (x *sensorHumiditySensorClient) Recv() (*SensorResponse, error) {
	m := new(SensorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorServer is the server API for Sensor service.
// All implementations must embed UnimplementedSensorServer
// for forward compatibility
type SensorServer interface {
	TempSensor(*SensorRequest, Sensor_TempSensorServer) error
	HumiditySensor(*SensorRequest, Sensor_HumiditySensorServer) error
	mustEmbedUnimplementedSensorServer()
}

// UnimplementedSensorServer must be embedded to have forward compatible implementations.
type UnimplementedSensorServer struct {
}

func (UnimplementedSensorServer) TempSensor(*SensorRequest, Sensor_TempSensorServer) error {
	return status.Errorf(codes.Unimplemented, "method TempSensor not implemented")
}
func (UnimplementedSensorServer) HumiditySensor(*SensorRequest, Sensor_HumiditySensorServer) error {
	return status.Errorf(codes.Unimplemented, "method HumiditySensor not implemented")
}
func (UnimplementedSensorServer) mustEmbedUnimplementedSensorServer() {}

// UnsafeSensorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorServer will
// result in compilation errors.
type UnsafeSensorServer interface {
	mustEmbedUnimplementedSensorServer()
}

func RegisterSensorServer(s grpc.ServiceRegistrar, srv SensorServer) {
	s.RegisterService(&_Sensor_serviceDesc, srv)
}

func _Sensor_TempSensor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SensorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SensorServer).TempSensor(m, &sensorTempSensorServer{stream})
}

type Sensor_TempSensorServer interface {
	Send(*SensorResponse) error
	grpc.ServerStream
}

type sensorTempSensorServer struct {
	grpc.ServerStream
}

func (x *sensorTempSensorServer) Send(m *SensorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Sensor_HumiditySensor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SensorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SensorServer).HumiditySensor(m, &sensorHumiditySensorServer{stream})
}

type Sensor_HumiditySensorServer interface {
	Send(*SensorResponse) error
	grpc.ServerStream
}

type sensorHumiditySensorServer struct {
	grpc.ServerStream
}

func (x *sensorHumiditySensorServer) Send(m *SensorResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Sensor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sensors.Sensor",
	HandlerType: (*SensorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TempSensor",
			Handler:       _Sensor_TempSensor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HumiditySensor",
			Handler:       _Sensor_HumiditySensor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/sensor.proto",
}
